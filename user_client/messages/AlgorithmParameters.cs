// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: algorithm_parameters.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from algorithm_parameters.proto</summary>
public static partial class AlgorithmParametersReflection {

  #region Descriptor
  /// <summary>File descriptor for algorithm_parameters.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AlgorithmParametersReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChphbGdvcml0aG1fcGFyYW1ldGVycy5wcm90bxoKbG90cy5wcm90bxoRdGFr",
          "ZV9wcm9maXQucHJvdG8aE3RyYWlsaW5nX3N0b3AucHJvdG8aFW1hY2Rfb3Bl",
          "bl9sZXZlbC5wcm90bxoWbWF0X3RyZW5kX3BlcmlvZC5wcm90bxoSbWF4aW11",
          "bV9yaXNrLnByb3RvGhVkZWNyZWFzZV9mYWN0b3IucHJvdG8aE21vdmluZ19w",
          "ZXJpb2QucHJvdG8aEm1vdmluZ19zaGlmdC5wcm90byLTAgoTQWxnb3JpdGht",
          "UGFyYW1ldGVycxITCgRMb3RzGAEgASgLMgUuTG90cxIfCgpUYWtlUHJvZml0",
          "GAIgASgLMgsuVGFrZVByb2ZpdBIjCgxUcmFpbGluZ1N0b3AYAyABKAsyDS5U",
          "cmFpbGluZ1N0b3ASJQoNTUFDRE9wZW5MZXZlbBgEIAEoCzIOLk1BQ0RPcGVu",
          "TGV2ZWwSJgoOTUFUVHJlbmRQZXJpb2QYBSABKAsyDi5NQVRyZW5kUGVyaW9k",
          "EiEKC01heGltdW1SaXNrGAYgASgLMgwuTWF4aW11bVJpc2sSJwoORGVjcmVh",
          "c2VGYWN0b3IYByABKAsyDy5EZWNyZWFzZUZhY3RvchIjCgxNb3ZpbmdQZXJp",
          "b2QYCCABKAsyDS5Nb3ZpbmdQZXJpb2QSIQoLTW92aW5nU2hpZnQYCSABKAsy",
          "DC5Nb3ZpbmdTaGlmdGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::LotsReflection.Descriptor, global::TakeProfitReflection.Descriptor, global::TrailingStopReflection.Descriptor, global::MacdOpenLevelReflection.Descriptor, global::MatTrendPeriodReflection.Descriptor, global::MaximumRiskReflection.Descriptor, global::DecreaseFactorReflection.Descriptor, global::MovingPeriodReflection.Descriptor, global::MovingShiftReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::AlgorithmParameters), global::AlgorithmParameters.Parser, new[]{ "Lots", "TakeProfit", "TrailingStop", "MACDOpenLevel", "MATTrendPeriod", "MaximumRisk", "DecreaseFactor", "MovingPeriod", "MovingShift" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class AlgorithmParameters : pb::IMessage<AlgorithmParameters> {
  private static readonly pb::MessageParser<AlgorithmParameters> _parser = new pb::MessageParser<AlgorithmParameters>(() => new AlgorithmParameters());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AlgorithmParameters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AlgorithmParametersReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlgorithmParameters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlgorithmParameters(AlgorithmParameters other) : this() {
    lots_ = other.lots_ != null ? other.lots_.Clone() : null;
    takeProfit_ = other.takeProfit_ != null ? other.takeProfit_.Clone() : null;
    trailingStop_ = other.trailingStop_ != null ? other.trailingStop_.Clone() : null;
    mACDOpenLevel_ = other.mACDOpenLevel_ != null ? other.mACDOpenLevel_.Clone() : null;
    mATTrendPeriod_ = other.mATTrendPeriod_ != null ? other.mATTrendPeriod_.Clone() : null;
    maximumRisk_ = other.maximumRisk_ != null ? other.maximumRisk_.Clone() : null;
    decreaseFactor_ = other.decreaseFactor_ != null ? other.decreaseFactor_.Clone() : null;
    movingPeriod_ = other.movingPeriod_ != null ? other.movingPeriod_.Clone() : null;
    movingShift_ = other.movingShift_ != null ? other.movingShift_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlgorithmParameters Clone() {
    return new AlgorithmParameters(this);
  }

  /// <summary>Field number for the "Lots" field.</summary>
  public const int LotsFieldNumber = 1;
  private global::Lots lots_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Lots Lots {
    get { return lots_; }
    set {
      lots_ = value;
    }
  }

  /// <summary>Field number for the "TakeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 2;
  private global::TakeProfit takeProfit_;
  /// <summary>
  /// macd_sample
  /// + lots
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TakeProfit TakeProfit {
    get { return takeProfit_; }
    set {
      takeProfit_ = value;
    }
  }

  /// <summary>Field number for the "TrailingStop" field.</summary>
  public const int TrailingStopFieldNumber = 3;
  private global::TrailingStop trailingStop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrailingStop TrailingStop {
    get { return trailingStop_; }
    set {
      trailingStop_ = value;
    }
  }

  /// <summary>Field number for the "MACDOpenLevel" field.</summary>
  public const int MACDOpenLevelFieldNumber = 4;
  private global::MACDOpenLevel mACDOpenLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MACDOpenLevel MACDOpenLevel {
    get { return mACDOpenLevel_; }
    set {
      mACDOpenLevel_ = value;
    }
  }

  /// <summary>Field number for the "MATTrendPeriod" field.</summary>
  public const int MATTrendPeriodFieldNumber = 5;
  private global::MATrendPeriod mATTrendPeriod_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MATrendPeriod MATTrendPeriod {
    get { return mATTrendPeriod_; }
    set {
      mATTrendPeriod_ = value;
    }
  }

  /// <summary>Field number for the "MaximumRisk" field.</summary>
  public const int MaximumRiskFieldNumber = 6;
  private global::MaximumRisk maximumRisk_;
  /// <summary>
  /// moving_average
  /// + lots
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaximumRisk MaximumRisk {
    get { return maximumRisk_; }
    set {
      maximumRisk_ = value;
    }
  }

  /// <summary>Field number for the "DecreaseFactor" field.</summary>
  public const int DecreaseFactorFieldNumber = 7;
  private global::DecreaseFactor decreaseFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DecreaseFactor DecreaseFactor {
    get { return decreaseFactor_; }
    set {
      decreaseFactor_ = value;
    }
  }

  /// <summary>Field number for the "MovingPeriod" field.</summary>
  public const int MovingPeriodFieldNumber = 8;
  private global::MovingPeriod movingPeriod_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MovingPeriod MovingPeriod {
    get { return movingPeriod_; }
    set {
      movingPeriod_ = value;
    }
  }

  /// <summary>Field number for the "MovingShift" field.</summary>
  public const int MovingShiftFieldNumber = 9;
  private global::MovingShift movingShift_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MovingShift MovingShift {
    get { return movingShift_; }
    set {
      movingShift_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AlgorithmParameters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AlgorithmParameters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Lots, other.Lots)) return false;
    if (!object.Equals(TakeProfit, other.TakeProfit)) return false;
    if (!object.Equals(TrailingStop, other.TrailingStop)) return false;
    if (!object.Equals(MACDOpenLevel, other.MACDOpenLevel)) return false;
    if (!object.Equals(MATTrendPeriod, other.MATTrendPeriod)) return false;
    if (!object.Equals(MaximumRisk, other.MaximumRisk)) return false;
    if (!object.Equals(DecreaseFactor, other.DecreaseFactor)) return false;
    if (!object.Equals(MovingPeriod, other.MovingPeriod)) return false;
    if (!object.Equals(MovingShift, other.MovingShift)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (lots_ != null) hash ^= Lots.GetHashCode();
    if (takeProfit_ != null) hash ^= TakeProfit.GetHashCode();
    if (trailingStop_ != null) hash ^= TrailingStop.GetHashCode();
    if (mACDOpenLevel_ != null) hash ^= MACDOpenLevel.GetHashCode();
    if (mATTrendPeriod_ != null) hash ^= MATTrendPeriod.GetHashCode();
    if (maximumRisk_ != null) hash ^= MaximumRisk.GetHashCode();
    if (decreaseFactor_ != null) hash ^= DecreaseFactor.GetHashCode();
    if (movingPeriod_ != null) hash ^= MovingPeriod.GetHashCode();
    if (movingShift_ != null) hash ^= MovingShift.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (lots_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Lots);
    }
    if (takeProfit_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TakeProfit);
    }
    if (trailingStop_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TrailingStop);
    }
    if (mACDOpenLevel_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MACDOpenLevel);
    }
    if (mATTrendPeriod_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(MATTrendPeriod);
    }
    if (maximumRisk_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(MaximumRisk);
    }
    if (decreaseFactor_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DecreaseFactor);
    }
    if (movingPeriod_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(MovingPeriod);
    }
    if (movingShift_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(MovingShift);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (lots_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lots);
    }
    if (takeProfit_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TakeProfit);
    }
    if (trailingStop_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrailingStop);
    }
    if (mACDOpenLevel_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MACDOpenLevel);
    }
    if (mATTrendPeriod_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MATTrendPeriod);
    }
    if (maximumRisk_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaximumRisk);
    }
    if (decreaseFactor_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DecreaseFactor);
    }
    if (movingPeriod_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MovingPeriod);
    }
    if (movingShift_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MovingShift);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AlgorithmParameters other) {
    if (other == null) {
      return;
    }
    if (other.lots_ != null) {
      if (lots_ == null) {
        Lots = new global::Lots();
      }
      Lots.MergeFrom(other.Lots);
    }
    if (other.takeProfit_ != null) {
      if (takeProfit_ == null) {
        TakeProfit = new global::TakeProfit();
      }
      TakeProfit.MergeFrom(other.TakeProfit);
    }
    if (other.trailingStop_ != null) {
      if (trailingStop_ == null) {
        TrailingStop = new global::TrailingStop();
      }
      TrailingStop.MergeFrom(other.TrailingStop);
    }
    if (other.mACDOpenLevel_ != null) {
      if (mACDOpenLevel_ == null) {
        MACDOpenLevel = new global::MACDOpenLevel();
      }
      MACDOpenLevel.MergeFrom(other.MACDOpenLevel);
    }
    if (other.mATTrendPeriod_ != null) {
      if (mATTrendPeriod_ == null) {
        MATTrendPeriod = new global::MATrendPeriod();
      }
      MATTrendPeriod.MergeFrom(other.MATTrendPeriod);
    }
    if (other.maximumRisk_ != null) {
      if (maximumRisk_ == null) {
        MaximumRisk = new global::MaximumRisk();
      }
      MaximumRisk.MergeFrom(other.MaximumRisk);
    }
    if (other.decreaseFactor_ != null) {
      if (decreaseFactor_ == null) {
        DecreaseFactor = new global::DecreaseFactor();
      }
      DecreaseFactor.MergeFrom(other.DecreaseFactor);
    }
    if (other.movingPeriod_ != null) {
      if (movingPeriod_ == null) {
        MovingPeriod = new global::MovingPeriod();
      }
      MovingPeriod.MergeFrom(other.MovingPeriod);
    }
    if (other.movingShift_ != null) {
      if (movingShift_ == null) {
        MovingShift = new global::MovingShift();
      }
      MovingShift.MergeFrom(other.MovingShift);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (lots_ == null) {
            Lots = new global::Lots();
          }
          input.ReadMessage(Lots);
          break;
        }
        case 18: {
          if (takeProfit_ == null) {
            TakeProfit = new global::TakeProfit();
          }
          input.ReadMessage(TakeProfit);
          break;
        }
        case 26: {
          if (trailingStop_ == null) {
            TrailingStop = new global::TrailingStop();
          }
          input.ReadMessage(TrailingStop);
          break;
        }
        case 34: {
          if (mACDOpenLevel_ == null) {
            MACDOpenLevel = new global::MACDOpenLevel();
          }
          input.ReadMessage(MACDOpenLevel);
          break;
        }
        case 42: {
          if (mATTrendPeriod_ == null) {
            MATTrendPeriod = new global::MATrendPeriod();
          }
          input.ReadMessage(MATTrendPeriod);
          break;
        }
        case 50: {
          if (maximumRisk_ == null) {
            MaximumRisk = new global::MaximumRisk();
          }
          input.ReadMessage(MaximumRisk);
          break;
        }
        case 58: {
          if (decreaseFactor_ == null) {
            DecreaseFactor = new global::DecreaseFactor();
          }
          input.ReadMessage(DecreaseFactor);
          break;
        }
        case 66: {
          if (movingPeriod_ == null) {
            MovingPeriod = new global::MovingPeriod();
          }
          input.ReadMessage(MovingPeriod);
          break;
        }
        case 74: {
          if (movingShift_ == null) {
            MovingShift = new global::MovingShift();
          }
          input.ReadMessage(MovingShift);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

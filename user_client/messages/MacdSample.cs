// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: macd_sample.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from macd_sample.proto</summary>
public static partial class MacdSampleReflection {

  #region Descriptor
  /// <summary>File descriptor for macd_sample.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MacdSampleReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFtYWNkX3NhbXBsZS5wcm90bxoKbG90cy5wcm90bxoRdGFrZV9wcm9maXQu",
          "cHJvdG8aE3RyYWlsaW5nX3N0b3AucHJvdG8aFW1hY2Rfb3Blbl9sZXZlbC5w",
          "cm90bxoWbWF0X3RyZW5kX3BlcmlvZC5wcm90byK8AQoKTUFDRFNhbXBsZRIT",
          "CgRsb3RzGAEgASgLMgUuTG90cxIgCgt0YWtlX3Byb2ZpdBgCIAEoCzILLlRh",
          "a2VQcm9maXQSJAoNdHJhaWxpbmdfc3RvcBgDIAEoCzINLlRyYWlsaW5nU3Rv",
          "cBInCg9tYWNkX29wZW5fbGV2ZWwYBCABKAsyDi5NQUNET3BlbkxldmVsEigK",
          "EG1hdF90cmFuZF9wZXJpb2QYBSABKAsyDi5NQVRyZW5kUGVyaW9kYgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::LotsReflection.Descriptor, global::TakeProfitReflection.Descriptor, global::TrailingStopReflection.Descriptor, global::MacdOpenLevelReflection.Descriptor, global::MatTrendPeriodReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MACDSample), global::MACDSample.Parser, new[]{ "Lots", "TakeProfit", "TrailingStop", "MacdOpenLevel", "MatTrandPeriod" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class MACDSample : pb::IMessage<MACDSample> {
  private static readonly pb::MessageParser<MACDSample> _parser = new pb::MessageParser<MACDSample>(() => new MACDSample());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MACDSample> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MacdSampleReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACDSample() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACDSample(MACDSample other) : this() {
    lots_ = other.lots_ != null ? other.lots_.Clone() : null;
    takeProfit_ = other.takeProfit_ != null ? other.takeProfit_.Clone() : null;
    trailingStop_ = other.trailingStop_ != null ? other.trailingStop_.Clone() : null;
    macdOpenLevel_ = other.macdOpenLevel_ != null ? other.macdOpenLevel_.Clone() : null;
    matTrandPeriod_ = other.matTrandPeriod_ != null ? other.matTrandPeriod_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACDSample Clone() {
    return new MACDSample(this);
  }

  /// <summary>Field number for the "lots" field.</summary>
  public const int LotsFieldNumber = 1;
  private global::Lots lots_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Lots Lots {
    get { return lots_; }
    set {
      lots_ = value;
    }
  }

  /// <summary>Field number for the "take_profit" field.</summary>
  public const int TakeProfitFieldNumber = 2;
  private global::TakeProfit takeProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TakeProfit TakeProfit {
    get { return takeProfit_; }
    set {
      takeProfit_ = value;
    }
  }

  /// <summary>Field number for the "trailing_stop" field.</summary>
  public const int TrailingStopFieldNumber = 3;
  private global::TrailingStop trailingStop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrailingStop TrailingStop {
    get { return trailingStop_; }
    set {
      trailingStop_ = value;
    }
  }

  /// <summary>Field number for the "macd_open_level" field.</summary>
  public const int MacdOpenLevelFieldNumber = 4;
  private global::MACDOpenLevel macdOpenLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MACDOpenLevel MacdOpenLevel {
    get { return macdOpenLevel_; }
    set {
      macdOpenLevel_ = value;
    }
  }

  /// <summary>Field number for the "mat_trand_period" field.</summary>
  public const int MatTrandPeriodFieldNumber = 5;
  private global::MATrendPeriod matTrandPeriod_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MATrendPeriod MatTrandPeriod {
    get { return matTrandPeriod_; }
    set {
      matTrandPeriod_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MACDSample);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MACDSample other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Lots, other.Lots)) return false;
    if (!object.Equals(TakeProfit, other.TakeProfit)) return false;
    if (!object.Equals(TrailingStop, other.TrailingStop)) return false;
    if (!object.Equals(MacdOpenLevel, other.MacdOpenLevel)) return false;
    if (!object.Equals(MatTrandPeriod, other.MatTrandPeriod)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (lots_ != null) hash ^= Lots.GetHashCode();
    if (takeProfit_ != null) hash ^= TakeProfit.GetHashCode();
    if (trailingStop_ != null) hash ^= TrailingStop.GetHashCode();
    if (macdOpenLevel_ != null) hash ^= MacdOpenLevel.GetHashCode();
    if (matTrandPeriod_ != null) hash ^= MatTrandPeriod.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (lots_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Lots);
    }
    if (takeProfit_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TakeProfit);
    }
    if (trailingStop_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TrailingStop);
    }
    if (macdOpenLevel_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MacdOpenLevel);
    }
    if (matTrandPeriod_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(MatTrandPeriod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (lots_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lots);
    }
    if (takeProfit_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TakeProfit);
    }
    if (trailingStop_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrailingStop);
    }
    if (macdOpenLevel_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MacdOpenLevel);
    }
    if (matTrandPeriod_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatTrandPeriod);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MACDSample other) {
    if (other == null) {
      return;
    }
    if (other.lots_ != null) {
      if (lots_ == null) {
        Lots = new global::Lots();
      }
      Lots.MergeFrom(other.Lots);
    }
    if (other.takeProfit_ != null) {
      if (takeProfit_ == null) {
        TakeProfit = new global::TakeProfit();
      }
      TakeProfit.MergeFrom(other.TakeProfit);
    }
    if (other.trailingStop_ != null) {
      if (trailingStop_ == null) {
        TrailingStop = new global::TrailingStop();
      }
      TrailingStop.MergeFrom(other.TrailingStop);
    }
    if (other.macdOpenLevel_ != null) {
      if (macdOpenLevel_ == null) {
        MacdOpenLevel = new global::MACDOpenLevel();
      }
      MacdOpenLevel.MergeFrom(other.MacdOpenLevel);
    }
    if (other.matTrandPeriod_ != null) {
      if (matTrandPeriod_ == null) {
        MatTrandPeriod = new global::MATrendPeriod();
      }
      MatTrandPeriod.MergeFrom(other.MatTrandPeriod);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (lots_ == null) {
            Lots = new global::Lots();
          }
          input.ReadMessage(Lots);
          break;
        }
        case 18: {
          if (takeProfit_ == null) {
            TakeProfit = new global::TakeProfit();
          }
          input.ReadMessage(TakeProfit);
          break;
        }
        case 26: {
          if (trailingStop_ == null) {
            TrailingStop = new global::TrailingStop();
          }
          input.ReadMessage(TrailingStop);
          break;
        }
        case 34: {
          if (macdOpenLevel_ == null) {
            MacdOpenLevel = new global::MACDOpenLevel();
          }
          input.ReadMessage(MacdOpenLevel);
          break;
        }
        case 42: {
          if (matTrandPeriod_ == null) {
            MatTrandPeriod = new global::MATrendPeriod();
          }
          input.ReadMessage(MatTrandPeriod);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

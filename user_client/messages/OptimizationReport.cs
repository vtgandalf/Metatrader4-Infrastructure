// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: optimization_report.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from optimization_report.proto</summary>
public static partial class OptimizationReportReflection {

  #region Descriptor
  /// <summary>File descriptor for optimization_report.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OptimizationReportReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChlvcHRpbWl6YXRpb25fcmVwb3J0LnByb3RvGgxwcm9maXQucHJvdG8aE3By",
          "b2ZpdF9mYWN0b3IucHJvdG8aFWV4cGVjdGVkX3BheW9mZi5wcm90bxoSbWF4",
          "X2RyYXdkb3duLnByb3RvGhdtYXhfZHJhd2Rvd25fcmF0ZS5wcm90bxoXcmVs",
          "YXRpdmVfZHJhd2Rvd24ucHJvdG8aHHJlbGF0aXZlX2RyYXdkb3duX3JhdGUu",
          "cHJvdG8aEmFic19kcmF3ZG93bi5wcm90bxoXYWJzX2RyYXdkb3duX3JhdGUu",
          "cHJvdG8aEmdyb3NzX3Byb2ZpdC5wcm90bxoQZ3Jvc3NfbG9zcy5wcm90bxoS",
          "dG90YWxfdHJhZGVzLnByb3RvGhpsYXJnZXN0X3Byb2ZpdF90cmFkZS5wcm90",
          "bxoYbGFyZ2VzdF9sb3NzX3RyYWRlLnByb3RvGhphdmVyYWdlX3Byb2ZpdF90",
          "cmFkZS5wcm90bxoYYXZlcmFnZV9sb3NzX3RyYWRlLnByb3RvGiFtb2RlbGlu",
          "Z19xdWFsaXR5X3BlcmNlbnRhZ2UucHJvdG8aIm1heF9jb25zZWN1dGl2ZV9w",
          "cm9maXRfY291bnQucHJvdG8aHG1heF9jb25zZWN1dGl2ZV9wcm9maXQucHJv",
          "dG8aIG1heF9jb25zZWN1dGl2ZV9sb3NzX2NvdW50LnByb3RvGhptYXhfY29u",
          "c2VjdXRpdmVfbG9zcy5wcm90bxogbWF4X2NvbnNlY3V0aXZlX3dpbnNfY291",
          "bnQucHJvdG8aIW1heF9jb25zZWN1dGl2ZV93aW5zX3Byb2ZpdC5wcm90bxoi",
          "bWF4X2NvbnNlY3V0aXZlX2xvc3Nlc19jb3VudC5wcm90bxohbWF4X2NvbnNl",
          "Y3V0aXZlX2xvc3Nlc19sb3NzLnByb3RvGhNwcm9maXRfdHJhZGVzLnByb3Rv",
          "Ghhwcm9maXRfdHJhZGVzX3JhdGUucHJvdG8aEWxvc3NfdHJhZGVzLnByb3Rv",
          "GhZsb3NzX3RyYWRlc19yYXRlLnByb3RvGhphdmVfY29uc2VjdXRpdmVfd2lu",
          "cy5wcm90bxocYXZlX2NvbnNlY3V0aXZlX2xvc3Nlcy5wcm90bxoVc2hvcnRf",
          "cG9zaXRpb25zLnByb3RvGhpzaG9ydF9wb3NpdGlvbnNfcmF0ZS5wcm90bxoU",
          "bG9uZ19wb3NpdGlvbnMucHJvdG8aGWxvbmdfcG9zaXRpb25zX3JhdGUucHJv",
          "dG8inQ0KEk9wdGltaXphdGlvblJlcG9ydBIXCgZwcm9maXQYASABKAsyBy5Q",
          "cm9maXQSJAoNcHJvZml0X2ZhY3RvchgCIAEoCzINLlByb2ZpdEZhY3RvchIo",
          "Cg9leHBlY3RlZF9wYXlvZmYYAyABKAsyDy5FeHRlY3RlZFBheW9mZhIiCgxt",
          "YXhfZHJhd2Rvd24YBCABKAsyDC5NYXhEcmF3RG93bhIrChFtYXhfZHJhd2Rv",
          "d25fcmF0ZRgFIAEoCzIQLk1heERyYXdEb3duUmF0ZRIsChFyZWxhdGl2ZV9k",
          "cmF3ZG93bhgGIAEoCzIRLlJlbGF0aXZlRHJhd0Rvd24SNQoWcmVsYXRpdmVf",
          "ZHJhd2Rvd25fcmF0ZRgHIAEoCzIVLlJlbGF0aXZlRHJhd0Rvd25SYXRlEiIK",
          "DGFic19kcmF3ZG93bhgIIAEoCzIMLkFic0RyYXdEb3duEisKEWFic19kcmF3",
          "ZG93bl9yYXRlGAkgASgLMhAuQWJzRHJhd0Rvd25SYXRlEiIKDGdyb3NzX3By",
          "b2ZpdBgKIAEoCzIMLkdyb3NzUHJvZml0Eh4KCmdyb3NzX2xvc3MYCyABKAsy",
          "Ci5Hcm9zc0xvc3MSIgoMdG90YWxfdHJhZGVzGAwgASgLMgwuVG90YWxUcmFk",
          "ZXMSMQoUbGFyZ2VzdF9wcm9maXRfdHJhZGUYDSABKAsyEy5MYXJnZXN0UHJv",
          "Zml0VHJhZGUSLQoSbGFyZ2VzdF9sb3NzX3RyYWRlGA4gASgLMhEuTGFyZ2Vz",
          "dExvc3NUcmFkZRIxChRhdmVyYWdlX3Byb2ZpdF90cmFkZRgPIAEoCzITLkF2",
          "ZXJhZ2VQcm9maXRUcmFkZRItChJhdmVyYWdlX2xvc3NfdHJhZGUYECABKAsy",
          "ES5BdmVyYWdlTG9zc1RyYWRlEj8KG21vZGVsaW5nX3F1YWxpdHlfcGVyY2Vu",
          "dGFnZRgRIAEoCzIaLk1vZGVsaW5nUXVhbGl0eVBlcmNlbnRhZ2USQAocbWF4",
          "X2NvbnNlY3V0aXZlX3Byb2ZpdF9jb3VudBgSIAEoCzIaLk1heENvbnNlY3V0",
          "aXZlUHJvZml0Q291bnQSNQoWbWF4X2NvbnNlY3V0aXZlX3Byb2ZpdBgTIAEo",
          "CzIVLk1heENvbnNlY3V0aXZlUHJvZml0EjwKGm1heF9jb25zZWN1dGl2ZV9s",
          "b3NzX2NvdW50GBQgASgLMhguTWF4Q29uc2VjdXRpdmVMb3NzQ291bnQSMQoU",
          "bWF4X2NvbnNlY3V0aXZlX2xvc3MYFSABKAsyEy5NYXhDb25zZWN1dGl2ZUxv",
          "c3MSPAoabWF4X2NvbnNlY3V0aXZlX3dpbnNfY291bnQYFiABKAsyGC5NYXhD",
          "b25zZWN1dGl2ZVdpbnNDb3VudBI+ChttYXhfY29uc2VjdXRpdmVfd2luc19w",
          "cm9maXQYFyABKAsyGS5NYXhDb25zZWN1dGl2ZVdpbnNQcm9maXQSQAocbWF4",
          "X2NvbnNlY3V0aXZlX2xvc3Nlc19jb3VudBgYIAEoCzIaLk1heENvbnNlY3V0",
          "aXZlTG9zc2VzQ291bnQSPgobbWF4X2NvbnNlY3V0aXZlX2xvc3Nlc19sb3Nz",
          "GBkgASgLMhkuTWF4Q29uc2VjdXRpdmVMb3NzZXNMb3NzEiQKDXByb2ZpdF90",
          "cmFkZXMYGiABKAsyDS5Qcm9maXRUcmFkZXMSLQoScHJvZml0X3RyYWRlc19y",
          "YXRlGBsgASgLMhEuUHJvZml0VHJhZGVzUmF0ZRIgCgtsb3NzX3RyYWRlcxgc",
          "IAEoCzILLkxvc3NUcmFkZXMSKQoQbG9zc190cmFkZXNfcmF0ZRgdIAEoCzIP",
          "Lkxvc3NUcmFkZXNSYXRlEjEKFGF2ZV9jb25zZWN1dGl2ZV93aW5zGB4gASgL",
          "MhMuQXZlQ29uc2VjdXRpdmVXaW5zEjUKFmF2ZV9jb25zZWN1dGl2ZV9sb3Nz",
          "ZXMYHyABKAsyFS5BdmVDb25zZWN1dGl2ZUxvc3NlcxIoCg9zaG9ydF9wb3Np",
          "dGlvbnMYICABKAsyDy5TaG9ydFBvc2l0aW9ucxIxChRzaG9ydF9wb3NpdGlv",
          "bnNfcmF0ZRghIAEoCzITLlNob3J0UG9zaXRpb25zUmF0ZRImCg5sb25nX3Bv",
          "c2l0aW9ucxgiIAEoCzIOLkxvbmdQb3NpdGlvbnMSLwoTbG9uZ19wb3NpdGlv",
          "bnNfcmF0ZRgjIAEoCzISLkxvbmdQb3NpdGlvbnNSYXRlYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ProfitReflection.Descriptor, global::ProfitFactorReflection.Descriptor, global::ExpectedPayoffReflection.Descriptor, global::MaxDrawdownReflection.Descriptor, global::MaxDrawdownRateReflection.Descriptor, global::RelativeDrawdownReflection.Descriptor, global::RelativeDrawdownRateReflection.Descriptor, global::AbsDrawdownReflection.Descriptor, global::AbsDrawdownRateReflection.Descriptor, global::GrossProfitReflection.Descriptor, global::GrossLossReflection.Descriptor, global::TotalTradesReflection.Descriptor, global::LargestProfitTradeReflection.Descriptor, global::LargestLossTradeReflection.Descriptor, global::AverageProfitTradeReflection.Descriptor, global::AverageLossTradeReflection.Descriptor, global::ModelingQualityPercentageReflection.Descriptor, global::MaxConsecutiveProfitCountReflection.Descriptor, global::MaxConsecutiveProfitReflection.Descriptor, global::MaxConsecutiveLossCountReflection.Descriptor, global::MaxConsecutiveLossReflection.Descriptor, global::MaxConsecutiveWinsCountReflection.Descriptor, global::MaxConsecutiveWinsProfitReflection.Descriptor, global::MaxConsecutiveLossesCountReflection.Descriptor, global::MaxConsecutiveLossesLossReflection.Descriptor, global::ProfitTradesReflection.Descriptor, global::ProfitTradesRateReflection.Descriptor, global::LossTradesReflection.Descriptor, global::LossTradesRateReflection.Descriptor, global::AveConsecutiveWinsReflection.Descriptor, global::AveConsecutiveLossesReflection.Descriptor, global::ShortPositionsReflection.Descriptor, global::ShortPositionsRateReflection.Descriptor, global::LongPositionsReflection.Descriptor, global::LongPositionsRateReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::OptimizationReport), global::OptimizationReport.Parser, new[]{ "Profit", "ProfitFactor", "ExpectedPayoff", "MaxDrawdown", "MaxDrawdownRate", "RelativeDrawdown", "RelativeDrawdownRate", "AbsDrawdown", "AbsDrawdownRate", "GrossProfit", "GrossLoss", "TotalTrades", "LargestProfitTrade", "LargestLossTrade", "AverageProfitTrade", "AverageLossTrade", "ModelingQualityPercentage", "MaxConsecutiveProfitCount", "MaxConsecutiveProfit", "MaxConsecutiveLossCount", "MaxConsecutiveLoss", "MaxConsecutiveWinsCount", "MaxConsecutiveWinsProfit", "MaxConsecutiveLossesCount", "MaxConsecutiveLossesLoss", "ProfitTrades", "ProfitTradesRate", "LossTrades", "LossTradesRate", "AveConsecutiveWins", "AveConsecutiveLosses", "ShortPositions", "ShortPositionsRate", "LongPositions", "LongPositionsRate" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class OptimizationReport : pb::IMessage<OptimizationReport> {
  private static readonly pb::MessageParser<OptimizationReport> _parser = new pb::MessageParser<OptimizationReport>(() => new OptimizationReport());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OptimizationReport> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OptimizationReportReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptimizationReport() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptimizationReport(OptimizationReport other) : this() {
    profit_ = other.profit_ != null ? other.profit_.Clone() : null;
    profitFactor_ = other.profitFactor_ != null ? other.profitFactor_.Clone() : null;
    expectedPayoff_ = other.expectedPayoff_ != null ? other.expectedPayoff_.Clone() : null;
    maxDrawdown_ = other.maxDrawdown_ != null ? other.maxDrawdown_.Clone() : null;
    maxDrawdownRate_ = other.maxDrawdownRate_ != null ? other.maxDrawdownRate_.Clone() : null;
    relativeDrawdown_ = other.relativeDrawdown_ != null ? other.relativeDrawdown_.Clone() : null;
    relativeDrawdownRate_ = other.relativeDrawdownRate_ != null ? other.relativeDrawdownRate_.Clone() : null;
    absDrawdown_ = other.absDrawdown_ != null ? other.absDrawdown_.Clone() : null;
    absDrawdownRate_ = other.absDrawdownRate_ != null ? other.absDrawdownRate_.Clone() : null;
    grossProfit_ = other.grossProfit_ != null ? other.grossProfit_.Clone() : null;
    grossLoss_ = other.grossLoss_ != null ? other.grossLoss_.Clone() : null;
    totalTrades_ = other.totalTrades_ != null ? other.totalTrades_.Clone() : null;
    largestProfitTrade_ = other.largestProfitTrade_ != null ? other.largestProfitTrade_.Clone() : null;
    largestLossTrade_ = other.largestLossTrade_ != null ? other.largestLossTrade_.Clone() : null;
    averageProfitTrade_ = other.averageProfitTrade_ != null ? other.averageProfitTrade_.Clone() : null;
    averageLossTrade_ = other.averageLossTrade_ != null ? other.averageLossTrade_.Clone() : null;
    modelingQualityPercentage_ = other.modelingQualityPercentage_ != null ? other.modelingQualityPercentage_.Clone() : null;
    maxConsecutiveProfitCount_ = other.maxConsecutiveProfitCount_ != null ? other.maxConsecutiveProfitCount_.Clone() : null;
    maxConsecutiveProfit_ = other.maxConsecutiveProfit_ != null ? other.maxConsecutiveProfit_.Clone() : null;
    maxConsecutiveLossCount_ = other.maxConsecutiveLossCount_ != null ? other.maxConsecutiveLossCount_.Clone() : null;
    maxConsecutiveLoss_ = other.maxConsecutiveLoss_ != null ? other.maxConsecutiveLoss_.Clone() : null;
    maxConsecutiveWinsCount_ = other.maxConsecutiveWinsCount_ != null ? other.maxConsecutiveWinsCount_.Clone() : null;
    maxConsecutiveWinsProfit_ = other.maxConsecutiveWinsProfit_ != null ? other.maxConsecutiveWinsProfit_.Clone() : null;
    maxConsecutiveLossesCount_ = other.maxConsecutiveLossesCount_ != null ? other.maxConsecutiveLossesCount_.Clone() : null;
    maxConsecutiveLossesLoss_ = other.maxConsecutiveLossesLoss_ != null ? other.maxConsecutiveLossesLoss_.Clone() : null;
    profitTrades_ = other.profitTrades_ != null ? other.profitTrades_.Clone() : null;
    profitTradesRate_ = other.profitTradesRate_ != null ? other.profitTradesRate_.Clone() : null;
    lossTrades_ = other.lossTrades_ != null ? other.lossTrades_.Clone() : null;
    lossTradesRate_ = other.lossTradesRate_ != null ? other.lossTradesRate_.Clone() : null;
    aveConsecutiveWins_ = other.aveConsecutiveWins_ != null ? other.aveConsecutiveWins_.Clone() : null;
    aveConsecutiveLosses_ = other.aveConsecutiveLosses_ != null ? other.aveConsecutiveLosses_.Clone() : null;
    shortPositions_ = other.shortPositions_ != null ? other.shortPositions_.Clone() : null;
    shortPositionsRate_ = other.shortPositionsRate_ != null ? other.shortPositionsRate_.Clone() : null;
    longPositions_ = other.longPositions_ != null ? other.longPositions_.Clone() : null;
    longPositionsRate_ = other.longPositionsRate_ != null ? other.longPositionsRate_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OptimizationReport Clone() {
    return new OptimizationReport(this);
  }

  /// <summary>Field number for the "profit" field.</summary>
  public const int ProfitFieldNumber = 1;
  private global::Profit profit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Profit Profit {
    get { return profit_; }
    set {
      profit_ = value;
    }
  }

  /// <summary>Field number for the "profit_factor" field.</summary>
  public const int ProfitFactorFieldNumber = 2;
  private global::ProfitFactor profitFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProfitFactor ProfitFactor {
    get { return profitFactor_; }
    set {
      profitFactor_ = value;
    }
  }

  /// <summary>Field number for the "expected_payoff" field.</summary>
  public const int ExpectedPayoffFieldNumber = 3;
  private global::ExtectedPayoff expectedPayoff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtectedPayoff ExpectedPayoff {
    get { return expectedPayoff_; }
    set {
      expectedPayoff_ = value;
    }
  }

  /// <summary>Field number for the "max_drawdown" field.</summary>
  public const int MaxDrawdownFieldNumber = 4;
  private global::MaxDrawDown maxDrawdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxDrawDown MaxDrawdown {
    get { return maxDrawdown_; }
    set {
      maxDrawdown_ = value;
    }
  }

  /// <summary>Field number for the "max_drawdown_rate" field.</summary>
  public const int MaxDrawdownRateFieldNumber = 5;
  private global::MaxDrawDownRate maxDrawdownRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxDrawDownRate MaxDrawdownRate {
    get { return maxDrawdownRate_; }
    set {
      maxDrawdownRate_ = value;
    }
  }

  /// <summary>Field number for the "relative_drawdown" field.</summary>
  public const int RelativeDrawdownFieldNumber = 6;
  private global::RelativeDrawDown relativeDrawdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RelativeDrawDown RelativeDrawdown {
    get { return relativeDrawdown_; }
    set {
      relativeDrawdown_ = value;
    }
  }

  /// <summary>Field number for the "relative_drawdown_rate" field.</summary>
  public const int RelativeDrawdownRateFieldNumber = 7;
  private global::RelativeDrawDownRate relativeDrawdownRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RelativeDrawDownRate RelativeDrawdownRate {
    get { return relativeDrawdownRate_; }
    set {
      relativeDrawdownRate_ = value;
    }
  }

  /// <summary>Field number for the "abs_drawdown" field.</summary>
  public const int AbsDrawdownFieldNumber = 8;
  private global::AbsDrawDown absDrawdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AbsDrawDown AbsDrawdown {
    get { return absDrawdown_; }
    set {
      absDrawdown_ = value;
    }
  }

  /// <summary>Field number for the "abs_drawdown_rate" field.</summary>
  public const int AbsDrawdownRateFieldNumber = 9;
  private global::AbsDrawDownRate absDrawdownRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AbsDrawDownRate AbsDrawdownRate {
    get { return absDrawdownRate_; }
    set {
      absDrawdownRate_ = value;
    }
  }

  /// <summary>Field number for the "gross_profit" field.</summary>
  public const int GrossProfitFieldNumber = 10;
  private global::GrossProfit grossProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GrossProfit GrossProfit {
    get { return grossProfit_; }
    set {
      grossProfit_ = value;
    }
  }

  /// <summary>Field number for the "gross_loss" field.</summary>
  public const int GrossLossFieldNumber = 11;
  private global::GrossLoss grossLoss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GrossLoss GrossLoss {
    get { return grossLoss_; }
    set {
      grossLoss_ = value;
    }
  }

  /// <summary>Field number for the "total_trades" field.</summary>
  public const int TotalTradesFieldNumber = 12;
  private global::TotalTrades totalTrades_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TotalTrades TotalTrades {
    get { return totalTrades_; }
    set {
      totalTrades_ = value;
    }
  }

  /// <summary>Field number for the "largest_profit_trade" field.</summary>
  public const int LargestProfitTradeFieldNumber = 13;
  private global::LargestProfitTrade largestProfitTrade_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LargestProfitTrade LargestProfitTrade {
    get { return largestProfitTrade_; }
    set {
      largestProfitTrade_ = value;
    }
  }

  /// <summary>Field number for the "largest_loss_trade" field.</summary>
  public const int LargestLossTradeFieldNumber = 14;
  private global::LargestLossTrade largestLossTrade_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LargestLossTrade LargestLossTrade {
    get { return largestLossTrade_; }
    set {
      largestLossTrade_ = value;
    }
  }

  /// <summary>Field number for the "average_profit_trade" field.</summary>
  public const int AverageProfitTradeFieldNumber = 15;
  private global::AverageProfitTrade averageProfitTrade_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AverageProfitTrade AverageProfitTrade {
    get { return averageProfitTrade_; }
    set {
      averageProfitTrade_ = value;
    }
  }

  /// <summary>Field number for the "average_loss_trade" field.</summary>
  public const int AverageLossTradeFieldNumber = 16;
  private global::AverageLossTrade averageLossTrade_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AverageLossTrade AverageLossTrade {
    get { return averageLossTrade_; }
    set {
      averageLossTrade_ = value;
    }
  }

  /// <summary>Field number for the "modeling_quality_percentage" field.</summary>
  public const int ModelingQualityPercentageFieldNumber = 17;
  private global::ModelingQualityPercentage modelingQualityPercentage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModelingQualityPercentage ModelingQualityPercentage {
    get { return modelingQualityPercentage_; }
    set {
      modelingQualityPercentage_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_profit_count" field.</summary>
  public const int MaxConsecutiveProfitCountFieldNumber = 18;
  private global::MaxConsecutiveProfitCount maxConsecutiveProfitCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveProfitCount MaxConsecutiveProfitCount {
    get { return maxConsecutiveProfitCount_; }
    set {
      maxConsecutiveProfitCount_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_profit" field.</summary>
  public const int MaxConsecutiveProfitFieldNumber = 19;
  private global::MaxConsecutiveProfit maxConsecutiveProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveProfit MaxConsecutiveProfit {
    get { return maxConsecutiveProfit_; }
    set {
      maxConsecutiveProfit_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_loss_count" field.</summary>
  public const int MaxConsecutiveLossCountFieldNumber = 20;
  private global::MaxConsecutiveLossCount maxConsecutiveLossCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveLossCount MaxConsecutiveLossCount {
    get { return maxConsecutiveLossCount_; }
    set {
      maxConsecutiveLossCount_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_loss" field.</summary>
  public const int MaxConsecutiveLossFieldNumber = 21;
  private global::MaxConsecutiveLoss maxConsecutiveLoss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveLoss MaxConsecutiveLoss {
    get { return maxConsecutiveLoss_; }
    set {
      maxConsecutiveLoss_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_wins_count" field.</summary>
  public const int MaxConsecutiveWinsCountFieldNumber = 22;
  private global::MaxConsecutiveWinsCount maxConsecutiveWinsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveWinsCount MaxConsecutiveWinsCount {
    get { return maxConsecutiveWinsCount_; }
    set {
      maxConsecutiveWinsCount_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_wins_profit" field.</summary>
  public const int MaxConsecutiveWinsProfitFieldNumber = 23;
  private global::MaxConsecutiveWinsProfit maxConsecutiveWinsProfit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveWinsProfit MaxConsecutiveWinsProfit {
    get { return maxConsecutiveWinsProfit_; }
    set {
      maxConsecutiveWinsProfit_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_losses_count" field.</summary>
  public const int MaxConsecutiveLossesCountFieldNumber = 24;
  private global::MaxConsecutiveLossesCount maxConsecutiveLossesCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveLossesCount MaxConsecutiveLossesCount {
    get { return maxConsecutiveLossesCount_; }
    set {
      maxConsecutiveLossesCount_ = value;
    }
  }

  /// <summary>Field number for the "max_consecutive_losses_loss" field.</summary>
  public const int MaxConsecutiveLossesLossFieldNumber = 25;
  private global::MaxConsecutiveLossesLoss maxConsecutiveLossesLoss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaxConsecutiveLossesLoss MaxConsecutiveLossesLoss {
    get { return maxConsecutiveLossesLoss_; }
    set {
      maxConsecutiveLossesLoss_ = value;
    }
  }

  /// <summary>Field number for the "profit_trades" field.</summary>
  public const int ProfitTradesFieldNumber = 26;
  private global::ProfitTrades profitTrades_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProfitTrades ProfitTrades {
    get { return profitTrades_; }
    set {
      profitTrades_ = value;
    }
  }

  /// <summary>Field number for the "profit_trades_rate" field.</summary>
  public const int ProfitTradesRateFieldNumber = 27;
  private global::ProfitTradesRate profitTradesRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProfitTradesRate ProfitTradesRate {
    get { return profitTradesRate_; }
    set {
      profitTradesRate_ = value;
    }
  }

  /// <summary>Field number for the "loss_trades" field.</summary>
  public const int LossTradesFieldNumber = 28;
  private global::LossTrades lossTrades_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LossTrades LossTrades {
    get { return lossTrades_; }
    set {
      lossTrades_ = value;
    }
  }

  /// <summary>Field number for the "loss_trades_rate" field.</summary>
  public const int LossTradesRateFieldNumber = 29;
  private global::LossTradesRate lossTradesRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LossTradesRate LossTradesRate {
    get { return lossTradesRate_; }
    set {
      lossTradesRate_ = value;
    }
  }

  /// <summary>Field number for the "ave_consecutive_wins" field.</summary>
  public const int AveConsecutiveWinsFieldNumber = 30;
  private global::AveConsecutiveWins aveConsecutiveWins_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AveConsecutiveWins AveConsecutiveWins {
    get { return aveConsecutiveWins_; }
    set {
      aveConsecutiveWins_ = value;
    }
  }

  /// <summary>Field number for the "ave_consecutive_losses" field.</summary>
  public const int AveConsecutiveLossesFieldNumber = 31;
  private global::AveConsecutiveLosses aveConsecutiveLosses_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AveConsecutiveLosses AveConsecutiveLosses {
    get { return aveConsecutiveLosses_; }
    set {
      aveConsecutiveLosses_ = value;
    }
  }

  /// <summary>Field number for the "short_positions" field.</summary>
  public const int ShortPositionsFieldNumber = 32;
  private global::ShortPositions shortPositions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ShortPositions ShortPositions {
    get { return shortPositions_; }
    set {
      shortPositions_ = value;
    }
  }

  /// <summary>Field number for the "short_positions_rate" field.</summary>
  public const int ShortPositionsRateFieldNumber = 33;
  private global::ShortPositionsRate shortPositionsRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ShortPositionsRate ShortPositionsRate {
    get { return shortPositionsRate_; }
    set {
      shortPositionsRate_ = value;
    }
  }

  /// <summary>Field number for the "long_positions" field.</summary>
  public const int LongPositionsFieldNumber = 34;
  private global::LongPositions longPositions_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LongPositions LongPositions {
    get { return longPositions_; }
    set {
      longPositions_ = value;
    }
  }

  /// <summary>Field number for the "long_positions_rate" field.</summary>
  public const int LongPositionsRateFieldNumber = 35;
  private global::LongPositionsRate longPositionsRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LongPositionsRate LongPositionsRate {
    get { return longPositionsRate_; }
    set {
      longPositionsRate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OptimizationReport);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OptimizationReport other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Profit, other.Profit)) return false;
    if (!object.Equals(ProfitFactor, other.ProfitFactor)) return false;
    if (!object.Equals(ExpectedPayoff, other.ExpectedPayoff)) return false;
    if (!object.Equals(MaxDrawdown, other.MaxDrawdown)) return false;
    if (!object.Equals(MaxDrawdownRate, other.MaxDrawdownRate)) return false;
    if (!object.Equals(RelativeDrawdown, other.RelativeDrawdown)) return false;
    if (!object.Equals(RelativeDrawdownRate, other.RelativeDrawdownRate)) return false;
    if (!object.Equals(AbsDrawdown, other.AbsDrawdown)) return false;
    if (!object.Equals(AbsDrawdownRate, other.AbsDrawdownRate)) return false;
    if (!object.Equals(GrossProfit, other.GrossProfit)) return false;
    if (!object.Equals(GrossLoss, other.GrossLoss)) return false;
    if (!object.Equals(TotalTrades, other.TotalTrades)) return false;
    if (!object.Equals(LargestProfitTrade, other.LargestProfitTrade)) return false;
    if (!object.Equals(LargestLossTrade, other.LargestLossTrade)) return false;
    if (!object.Equals(AverageProfitTrade, other.AverageProfitTrade)) return false;
    if (!object.Equals(AverageLossTrade, other.AverageLossTrade)) return false;
    if (!object.Equals(ModelingQualityPercentage, other.ModelingQualityPercentage)) return false;
    if (!object.Equals(MaxConsecutiveProfitCount, other.MaxConsecutiveProfitCount)) return false;
    if (!object.Equals(MaxConsecutiveProfit, other.MaxConsecutiveProfit)) return false;
    if (!object.Equals(MaxConsecutiveLossCount, other.MaxConsecutiveLossCount)) return false;
    if (!object.Equals(MaxConsecutiveLoss, other.MaxConsecutiveLoss)) return false;
    if (!object.Equals(MaxConsecutiveWinsCount, other.MaxConsecutiveWinsCount)) return false;
    if (!object.Equals(MaxConsecutiveWinsProfit, other.MaxConsecutiveWinsProfit)) return false;
    if (!object.Equals(MaxConsecutiveLossesCount, other.MaxConsecutiveLossesCount)) return false;
    if (!object.Equals(MaxConsecutiveLossesLoss, other.MaxConsecutiveLossesLoss)) return false;
    if (!object.Equals(ProfitTrades, other.ProfitTrades)) return false;
    if (!object.Equals(ProfitTradesRate, other.ProfitTradesRate)) return false;
    if (!object.Equals(LossTrades, other.LossTrades)) return false;
    if (!object.Equals(LossTradesRate, other.LossTradesRate)) return false;
    if (!object.Equals(AveConsecutiveWins, other.AveConsecutiveWins)) return false;
    if (!object.Equals(AveConsecutiveLosses, other.AveConsecutiveLosses)) return false;
    if (!object.Equals(ShortPositions, other.ShortPositions)) return false;
    if (!object.Equals(ShortPositionsRate, other.ShortPositionsRate)) return false;
    if (!object.Equals(LongPositions, other.LongPositions)) return false;
    if (!object.Equals(LongPositionsRate, other.LongPositionsRate)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (profit_ != null) hash ^= Profit.GetHashCode();
    if (profitFactor_ != null) hash ^= ProfitFactor.GetHashCode();
    if (expectedPayoff_ != null) hash ^= ExpectedPayoff.GetHashCode();
    if (maxDrawdown_ != null) hash ^= MaxDrawdown.GetHashCode();
    if (maxDrawdownRate_ != null) hash ^= MaxDrawdownRate.GetHashCode();
    if (relativeDrawdown_ != null) hash ^= RelativeDrawdown.GetHashCode();
    if (relativeDrawdownRate_ != null) hash ^= RelativeDrawdownRate.GetHashCode();
    if (absDrawdown_ != null) hash ^= AbsDrawdown.GetHashCode();
    if (absDrawdownRate_ != null) hash ^= AbsDrawdownRate.GetHashCode();
    if (grossProfit_ != null) hash ^= GrossProfit.GetHashCode();
    if (grossLoss_ != null) hash ^= GrossLoss.GetHashCode();
    if (totalTrades_ != null) hash ^= TotalTrades.GetHashCode();
    if (largestProfitTrade_ != null) hash ^= LargestProfitTrade.GetHashCode();
    if (largestLossTrade_ != null) hash ^= LargestLossTrade.GetHashCode();
    if (averageProfitTrade_ != null) hash ^= AverageProfitTrade.GetHashCode();
    if (averageLossTrade_ != null) hash ^= AverageLossTrade.GetHashCode();
    if (modelingQualityPercentage_ != null) hash ^= ModelingQualityPercentage.GetHashCode();
    if (maxConsecutiveProfitCount_ != null) hash ^= MaxConsecutiveProfitCount.GetHashCode();
    if (maxConsecutiveProfit_ != null) hash ^= MaxConsecutiveProfit.GetHashCode();
    if (maxConsecutiveLossCount_ != null) hash ^= MaxConsecutiveLossCount.GetHashCode();
    if (maxConsecutiveLoss_ != null) hash ^= MaxConsecutiveLoss.GetHashCode();
    if (maxConsecutiveWinsCount_ != null) hash ^= MaxConsecutiveWinsCount.GetHashCode();
    if (maxConsecutiveWinsProfit_ != null) hash ^= MaxConsecutiveWinsProfit.GetHashCode();
    if (maxConsecutiveLossesCount_ != null) hash ^= MaxConsecutiveLossesCount.GetHashCode();
    if (maxConsecutiveLossesLoss_ != null) hash ^= MaxConsecutiveLossesLoss.GetHashCode();
    if (profitTrades_ != null) hash ^= ProfitTrades.GetHashCode();
    if (profitTradesRate_ != null) hash ^= ProfitTradesRate.GetHashCode();
    if (lossTrades_ != null) hash ^= LossTrades.GetHashCode();
    if (lossTradesRate_ != null) hash ^= LossTradesRate.GetHashCode();
    if (aveConsecutiveWins_ != null) hash ^= AveConsecutiveWins.GetHashCode();
    if (aveConsecutiveLosses_ != null) hash ^= AveConsecutiveLosses.GetHashCode();
    if (shortPositions_ != null) hash ^= ShortPositions.GetHashCode();
    if (shortPositionsRate_ != null) hash ^= ShortPositionsRate.GetHashCode();
    if (longPositions_ != null) hash ^= LongPositions.GetHashCode();
    if (longPositionsRate_ != null) hash ^= LongPositionsRate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (profit_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Profit);
    }
    if (profitFactor_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ProfitFactor);
    }
    if (expectedPayoff_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ExpectedPayoff);
    }
    if (maxDrawdown_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MaxDrawdown);
    }
    if (maxDrawdownRate_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(MaxDrawdownRate);
    }
    if (relativeDrawdown_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(RelativeDrawdown);
    }
    if (relativeDrawdownRate_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(RelativeDrawdownRate);
    }
    if (absDrawdown_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(AbsDrawdown);
    }
    if (absDrawdownRate_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(AbsDrawdownRate);
    }
    if (grossProfit_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(GrossProfit);
    }
    if (grossLoss_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(GrossLoss);
    }
    if (totalTrades_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(TotalTrades);
    }
    if (largestProfitTrade_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(LargestProfitTrade);
    }
    if (largestLossTrade_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(LargestLossTrade);
    }
    if (averageProfitTrade_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(AverageProfitTrade);
    }
    if (averageLossTrade_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(AverageLossTrade);
    }
    if (modelingQualityPercentage_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(ModelingQualityPercentage);
    }
    if (maxConsecutiveProfitCount_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(MaxConsecutiveProfitCount);
    }
    if (maxConsecutiveProfit_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(MaxConsecutiveProfit);
    }
    if (maxConsecutiveLossCount_ != null) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(MaxConsecutiveLossCount);
    }
    if (maxConsecutiveLoss_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(MaxConsecutiveLoss);
    }
    if (maxConsecutiveWinsCount_ != null) {
      output.WriteRawTag(178, 1);
      output.WriteMessage(MaxConsecutiveWinsCount);
    }
    if (maxConsecutiveWinsProfit_ != null) {
      output.WriteRawTag(186, 1);
      output.WriteMessage(MaxConsecutiveWinsProfit);
    }
    if (maxConsecutiveLossesCount_ != null) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(MaxConsecutiveLossesCount);
    }
    if (maxConsecutiveLossesLoss_ != null) {
      output.WriteRawTag(202, 1);
      output.WriteMessage(MaxConsecutiveLossesLoss);
    }
    if (profitTrades_ != null) {
      output.WriteRawTag(210, 1);
      output.WriteMessage(ProfitTrades);
    }
    if (profitTradesRate_ != null) {
      output.WriteRawTag(218, 1);
      output.WriteMessage(ProfitTradesRate);
    }
    if (lossTrades_ != null) {
      output.WriteRawTag(226, 1);
      output.WriteMessage(LossTrades);
    }
    if (lossTradesRate_ != null) {
      output.WriteRawTag(234, 1);
      output.WriteMessage(LossTradesRate);
    }
    if (aveConsecutiveWins_ != null) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(AveConsecutiveWins);
    }
    if (aveConsecutiveLosses_ != null) {
      output.WriteRawTag(250, 1);
      output.WriteMessage(AveConsecutiveLosses);
    }
    if (shortPositions_ != null) {
      output.WriteRawTag(130, 2);
      output.WriteMessage(ShortPositions);
    }
    if (shortPositionsRate_ != null) {
      output.WriteRawTag(138, 2);
      output.WriteMessage(ShortPositionsRate);
    }
    if (longPositions_ != null) {
      output.WriteRawTag(146, 2);
      output.WriteMessage(LongPositions);
    }
    if (longPositionsRate_ != null) {
      output.WriteRawTag(154, 2);
      output.WriteMessage(LongPositionsRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (profit_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profit);
    }
    if (profitFactor_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitFactor);
    }
    if (expectedPayoff_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectedPayoff);
    }
    if (maxDrawdown_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxDrawdown);
    }
    if (maxDrawdownRate_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxDrawdownRate);
    }
    if (relativeDrawdown_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelativeDrawdown);
    }
    if (relativeDrawdownRate_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelativeDrawdownRate);
    }
    if (absDrawdown_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbsDrawdown);
    }
    if (absDrawdownRate_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbsDrawdownRate);
    }
    if (grossProfit_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrossProfit);
    }
    if (grossLoss_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrossLoss);
    }
    if (totalTrades_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalTrades);
    }
    if (largestProfitTrade_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LargestProfitTrade);
    }
    if (largestLossTrade_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LargestLossTrade);
    }
    if (averageProfitTrade_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AverageProfitTrade);
    }
    if (averageLossTrade_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AverageLossTrade);
    }
    if (modelingQualityPercentage_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModelingQualityPercentage);
    }
    if (maxConsecutiveProfitCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveProfitCount);
    }
    if (maxConsecutiveProfit_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveProfit);
    }
    if (maxConsecutiveLossCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveLossCount);
    }
    if (maxConsecutiveLoss_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveLoss);
    }
    if (maxConsecutiveWinsCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveWinsCount);
    }
    if (maxConsecutiveWinsProfit_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveWinsProfit);
    }
    if (maxConsecutiveLossesCount_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveLossesCount);
    }
    if (maxConsecutiveLossesLoss_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxConsecutiveLossesLoss);
    }
    if (profitTrades_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfitTrades);
    }
    if (profitTradesRate_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfitTradesRate);
    }
    if (lossTrades_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LossTrades);
    }
    if (lossTradesRate_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LossTradesRate);
    }
    if (aveConsecutiveWins_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AveConsecutiveWins);
    }
    if (aveConsecutiveLosses_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AveConsecutiveLosses);
    }
    if (shortPositions_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShortPositions);
    }
    if (shortPositionsRate_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShortPositionsRate);
    }
    if (longPositions_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LongPositions);
    }
    if (longPositionsRate_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LongPositionsRate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OptimizationReport other) {
    if (other == null) {
      return;
    }
    if (other.profit_ != null) {
      if (profit_ == null) {
        Profit = new global::Profit();
      }
      Profit.MergeFrom(other.Profit);
    }
    if (other.profitFactor_ != null) {
      if (profitFactor_ == null) {
        ProfitFactor = new global::ProfitFactor();
      }
      ProfitFactor.MergeFrom(other.ProfitFactor);
    }
    if (other.expectedPayoff_ != null) {
      if (expectedPayoff_ == null) {
        ExpectedPayoff = new global::ExtectedPayoff();
      }
      ExpectedPayoff.MergeFrom(other.ExpectedPayoff);
    }
    if (other.maxDrawdown_ != null) {
      if (maxDrawdown_ == null) {
        MaxDrawdown = new global::MaxDrawDown();
      }
      MaxDrawdown.MergeFrom(other.MaxDrawdown);
    }
    if (other.maxDrawdownRate_ != null) {
      if (maxDrawdownRate_ == null) {
        MaxDrawdownRate = new global::MaxDrawDownRate();
      }
      MaxDrawdownRate.MergeFrom(other.MaxDrawdownRate);
    }
    if (other.relativeDrawdown_ != null) {
      if (relativeDrawdown_ == null) {
        RelativeDrawdown = new global::RelativeDrawDown();
      }
      RelativeDrawdown.MergeFrom(other.RelativeDrawdown);
    }
    if (other.relativeDrawdownRate_ != null) {
      if (relativeDrawdownRate_ == null) {
        RelativeDrawdownRate = new global::RelativeDrawDownRate();
      }
      RelativeDrawdownRate.MergeFrom(other.RelativeDrawdownRate);
    }
    if (other.absDrawdown_ != null) {
      if (absDrawdown_ == null) {
        AbsDrawdown = new global::AbsDrawDown();
      }
      AbsDrawdown.MergeFrom(other.AbsDrawdown);
    }
    if (other.absDrawdownRate_ != null) {
      if (absDrawdownRate_ == null) {
        AbsDrawdownRate = new global::AbsDrawDownRate();
      }
      AbsDrawdownRate.MergeFrom(other.AbsDrawdownRate);
    }
    if (other.grossProfit_ != null) {
      if (grossProfit_ == null) {
        GrossProfit = new global::GrossProfit();
      }
      GrossProfit.MergeFrom(other.GrossProfit);
    }
    if (other.grossLoss_ != null) {
      if (grossLoss_ == null) {
        GrossLoss = new global::GrossLoss();
      }
      GrossLoss.MergeFrom(other.GrossLoss);
    }
    if (other.totalTrades_ != null) {
      if (totalTrades_ == null) {
        TotalTrades = new global::TotalTrades();
      }
      TotalTrades.MergeFrom(other.TotalTrades);
    }
    if (other.largestProfitTrade_ != null) {
      if (largestProfitTrade_ == null) {
        LargestProfitTrade = new global::LargestProfitTrade();
      }
      LargestProfitTrade.MergeFrom(other.LargestProfitTrade);
    }
    if (other.largestLossTrade_ != null) {
      if (largestLossTrade_ == null) {
        LargestLossTrade = new global::LargestLossTrade();
      }
      LargestLossTrade.MergeFrom(other.LargestLossTrade);
    }
    if (other.averageProfitTrade_ != null) {
      if (averageProfitTrade_ == null) {
        AverageProfitTrade = new global::AverageProfitTrade();
      }
      AverageProfitTrade.MergeFrom(other.AverageProfitTrade);
    }
    if (other.averageLossTrade_ != null) {
      if (averageLossTrade_ == null) {
        AverageLossTrade = new global::AverageLossTrade();
      }
      AverageLossTrade.MergeFrom(other.AverageLossTrade);
    }
    if (other.modelingQualityPercentage_ != null) {
      if (modelingQualityPercentage_ == null) {
        ModelingQualityPercentage = new global::ModelingQualityPercentage();
      }
      ModelingQualityPercentage.MergeFrom(other.ModelingQualityPercentage);
    }
    if (other.maxConsecutiveProfitCount_ != null) {
      if (maxConsecutiveProfitCount_ == null) {
        MaxConsecutiveProfitCount = new global::MaxConsecutiveProfitCount();
      }
      MaxConsecutiveProfitCount.MergeFrom(other.MaxConsecutiveProfitCount);
    }
    if (other.maxConsecutiveProfit_ != null) {
      if (maxConsecutiveProfit_ == null) {
        MaxConsecutiveProfit = new global::MaxConsecutiveProfit();
      }
      MaxConsecutiveProfit.MergeFrom(other.MaxConsecutiveProfit);
    }
    if (other.maxConsecutiveLossCount_ != null) {
      if (maxConsecutiveLossCount_ == null) {
        MaxConsecutiveLossCount = new global::MaxConsecutiveLossCount();
      }
      MaxConsecutiveLossCount.MergeFrom(other.MaxConsecutiveLossCount);
    }
    if (other.maxConsecutiveLoss_ != null) {
      if (maxConsecutiveLoss_ == null) {
        MaxConsecutiveLoss = new global::MaxConsecutiveLoss();
      }
      MaxConsecutiveLoss.MergeFrom(other.MaxConsecutiveLoss);
    }
    if (other.maxConsecutiveWinsCount_ != null) {
      if (maxConsecutiveWinsCount_ == null) {
        MaxConsecutiveWinsCount = new global::MaxConsecutiveWinsCount();
      }
      MaxConsecutiveWinsCount.MergeFrom(other.MaxConsecutiveWinsCount);
    }
    if (other.maxConsecutiveWinsProfit_ != null) {
      if (maxConsecutiveWinsProfit_ == null) {
        MaxConsecutiveWinsProfit = new global::MaxConsecutiveWinsProfit();
      }
      MaxConsecutiveWinsProfit.MergeFrom(other.MaxConsecutiveWinsProfit);
    }
    if (other.maxConsecutiveLossesCount_ != null) {
      if (maxConsecutiveLossesCount_ == null) {
        MaxConsecutiveLossesCount = new global::MaxConsecutiveLossesCount();
      }
      MaxConsecutiveLossesCount.MergeFrom(other.MaxConsecutiveLossesCount);
    }
    if (other.maxConsecutiveLossesLoss_ != null) {
      if (maxConsecutiveLossesLoss_ == null) {
        MaxConsecutiveLossesLoss = new global::MaxConsecutiveLossesLoss();
      }
      MaxConsecutiveLossesLoss.MergeFrom(other.MaxConsecutiveLossesLoss);
    }
    if (other.profitTrades_ != null) {
      if (profitTrades_ == null) {
        ProfitTrades = new global::ProfitTrades();
      }
      ProfitTrades.MergeFrom(other.ProfitTrades);
    }
    if (other.profitTradesRate_ != null) {
      if (profitTradesRate_ == null) {
        ProfitTradesRate = new global::ProfitTradesRate();
      }
      ProfitTradesRate.MergeFrom(other.ProfitTradesRate);
    }
    if (other.lossTrades_ != null) {
      if (lossTrades_ == null) {
        LossTrades = new global::LossTrades();
      }
      LossTrades.MergeFrom(other.LossTrades);
    }
    if (other.lossTradesRate_ != null) {
      if (lossTradesRate_ == null) {
        LossTradesRate = new global::LossTradesRate();
      }
      LossTradesRate.MergeFrom(other.LossTradesRate);
    }
    if (other.aveConsecutiveWins_ != null) {
      if (aveConsecutiveWins_ == null) {
        AveConsecutiveWins = new global::AveConsecutiveWins();
      }
      AveConsecutiveWins.MergeFrom(other.AveConsecutiveWins);
    }
    if (other.aveConsecutiveLosses_ != null) {
      if (aveConsecutiveLosses_ == null) {
        AveConsecutiveLosses = new global::AveConsecutiveLosses();
      }
      AveConsecutiveLosses.MergeFrom(other.AveConsecutiveLosses);
    }
    if (other.shortPositions_ != null) {
      if (shortPositions_ == null) {
        ShortPositions = new global::ShortPositions();
      }
      ShortPositions.MergeFrom(other.ShortPositions);
    }
    if (other.shortPositionsRate_ != null) {
      if (shortPositionsRate_ == null) {
        ShortPositionsRate = new global::ShortPositionsRate();
      }
      ShortPositionsRate.MergeFrom(other.ShortPositionsRate);
    }
    if (other.longPositions_ != null) {
      if (longPositions_ == null) {
        LongPositions = new global::LongPositions();
      }
      LongPositions.MergeFrom(other.LongPositions);
    }
    if (other.longPositionsRate_ != null) {
      if (longPositionsRate_ == null) {
        LongPositionsRate = new global::LongPositionsRate();
      }
      LongPositionsRate.MergeFrom(other.LongPositionsRate);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (profit_ == null) {
            Profit = new global::Profit();
          }
          input.ReadMessage(Profit);
          break;
        }
        case 18: {
          if (profitFactor_ == null) {
            ProfitFactor = new global::ProfitFactor();
          }
          input.ReadMessage(ProfitFactor);
          break;
        }
        case 26: {
          if (expectedPayoff_ == null) {
            ExpectedPayoff = new global::ExtectedPayoff();
          }
          input.ReadMessage(ExpectedPayoff);
          break;
        }
        case 34: {
          if (maxDrawdown_ == null) {
            MaxDrawdown = new global::MaxDrawDown();
          }
          input.ReadMessage(MaxDrawdown);
          break;
        }
        case 42: {
          if (maxDrawdownRate_ == null) {
            MaxDrawdownRate = new global::MaxDrawDownRate();
          }
          input.ReadMessage(MaxDrawdownRate);
          break;
        }
        case 50: {
          if (relativeDrawdown_ == null) {
            RelativeDrawdown = new global::RelativeDrawDown();
          }
          input.ReadMessage(RelativeDrawdown);
          break;
        }
        case 58: {
          if (relativeDrawdownRate_ == null) {
            RelativeDrawdownRate = new global::RelativeDrawDownRate();
          }
          input.ReadMessage(RelativeDrawdownRate);
          break;
        }
        case 66: {
          if (absDrawdown_ == null) {
            AbsDrawdown = new global::AbsDrawDown();
          }
          input.ReadMessage(AbsDrawdown);
          break;
        }
        case 74: {
          if (absDrawdownRate_ == null) {
            AbsDrawdownRate = new global::AbsDrawDownRate();
          }
          input.ReadMessage(AbsDrawdownRate);
          break;
        }
        case 82: {
          if (grossProfit_ == null) {
            GrossProfit = new global::GrossProfit();
          }
          input.ReadMessage(GrossProfit);
          break;
        }
        case 90: {
          if (grossLoss_ == null) {
            GrossLoss = new global::GrossLoss();
          }
          input.ReadMessage(GrossLoss);
          break;
        }
        case 98: {
          if (totalTrades_ == null) {
            TotalTrades = new global::TotalTrades();
          }
          input.ReadMessage(TotalTrades);
          break;
        }
        case 106: {
          if (largestProfitTrade_ == null) {
            LargestProfitTrade = new global::LargestProfitTrade();
          }
          input.ReadMessage(LargestProfitTrade);
          break;
        }
        case 114: {
          if (largestLossTrade_ == null) {
            LargestLossTrade = new global::LargestLossTrade();
          }
          input.ReadMessage(LargestLossTrade);
          break;
        }
        case 122: {
          if (averageProfitTrade_ == null) {
            AverageProfitTrade = new global::AverageProfitTrade();
          }
          input.ReadMessage(AverageProfitTrade);
          break;
        }
        case 130: {
          if (averageLossTrade_ == null) {
            AverageLossTrade = new global::AverageLossTrade();
          }
          input.ReadMessage(AverageLossTrade);
          break;
        }
        case 138: {
          if (modelingQualityPercentage_ == null) {
            ModelingQualityPercentage = new global::ModelingQualityPercentage();
          }
          input.ReadMessage(ModelingQualityPercentage);
          break;
        }
        case 146: {
          if (maxConsecutiveProfitCount_ == null) {
            MaxConsecutiveProfitCount = new global::MaxConsecutiveProfitCount();
          }
          input.ReadMessage(MaxConsecutiveProfitCount);
          break;
        }
        case 154: {
          if (maxConsecutiveProfit_ == null) {
            MaxConsecutiveProfit = new global::MaxConsecutiveProfit();
          }
          input.ReadMessage(MaxConsecutiveProfit);
          break;
        }
        case 162: {
          if (maxConsecutiveLossCount_ == null) {
            MaxConsecutiveLossCount = new global::MaxConsecutiveLossCount();
          }
          input.ReadMessage(MaxConsecutiveLossCount);
          break;
        }
        case 170: {
          if (maxConsecutiveLoss_ == null) {
            MaxConsecutiveLoss = new global::MaxConsecutiveLoss();
          }
          input.ReadMessage(MaxConsecutiveLoss);
          break;
        }
        case 178: {
          if (maxConsecutiveWinsCount_ == null) {
            MaxConsecutiveWinsCount = new global::MaxConsecutiveWinsCount();
          }
          input.ReadMessage(MaxConsecutiveWinsCount);
          break;
        }
        case 186: {
          if (maxConsecutiveWinsProfit_ == null) {
            MaxConsecutiveWinsProfit = new global::MaxConsecutiveWinsProfit();
          }
          input.ReadMessage(MaxConsecutiveWinsProfit);
          break;
        }
        case 194: {
          if (maxConsecutiveLossesCount_ == null) {
            MaxConsecutiveLossesCount = new global::MaxConsecutiveLossesCount();
          }
          input.ReadMessage(MaxConsecutiveLossesCount);
          break;
        }
        case 202: {
          if (maxConsecutiveLossesLoss_ == null) {
            MaxConsecutiveLossesLoss = new global::MaxConsecutiveLossesLoss();
          }
          input.ReadMessage(MaxConsecutiveLossesLoss);
          break;
        }
        case 210: {
          if (profitTrades_ == null) {
            ProfitTrades = new global::ProfitTrades();
          }
          input.ReadMessage(ProfitTrades);
          break;
        }
        case 218: {
          if (profitTradesRate_ == null) {
            ProfitTradesRate = new global::ProfitTradesRate();
          }
          input.ReadMessage(ProfitTradesRate);
          break;
        }
        case 226: {
          if (lossTrades_ == null) {
            LossTrades = new global::LossTrades();
          }
          input.ReadMessage(LossTrades);
          break;
        }
        case 234: {
          if (lossTradesRate_ == null) {
            LossTradesRate = new global::LossTradesRate();
          }
          input.ReadMessage(LossTradesRate);
          break;
        }
        case 242: {
          if (aveConsecutiveWins_ == null) {
            AveConsecutiveWins = new global::AveConsecutiveWins();
          }
          input.ReadMessage(AveConsecutiveWins);
          break;
        }
        case 250: {
          if (aveConsecutiveLosses_ == null) {
            AveConsecutiveLosses = new global::AveConsecutiveLosses();
          }
          input.ReadMessage(AveConsecutiveLosses);
          break;
        }
        case 258: {
          if (shortPositions_ == null) {
            ShortPositions = new global::ShortPositions();
          }
          input.ReadMessage(ShortPositions);
          break;
        }
        case 266: {
          if (shortPositionsRate_ == null) {
            ShortPositionsRate = new global::ShortPositionsRate();
          }
          input.ReadMessage(ShortPositionsRate);
          break;
        }
        case 274: {
          if (longPositions_ == null) {
            LongPositions = new global::LongPositions();
          }
          input.ReadMessage(LongPositions);
          break;
        }
        case 282: {
          if (longPositionsRate_ == null) {
            LongPositionsRate = new global::LongPositionsRate();
          }
          input.ReadMessage(LongPositionsRate);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

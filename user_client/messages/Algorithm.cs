// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: algorithm.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from algorithm.proto</summary>
public static partial class AlgorithmReflection {

  #region Descriptor
  /// <summary>File descriptor for algorithm.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AlgorithmReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9hbGdvcml0aG0ucHJvdG8aEW1hY2Rfc2FtcGxlLnByb3RvGhRtb3Zpbmdf",
          "YXZlcmFnZS5wcm90byJmCglBbGdvcml0aG0SKAoObW92aW5nX2F2ZXJhZ2UY",
          "ASABKAsyDi5Nb3ZpbmdBdmVyYWdlSAASIgoLbWFjZF9zYW1wbGUYAiABKAsy",
          "Cy5NQUNEU2FtcGxlSABCCwoJYWxnb3JpdGhtYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::MacdSampleReflection.Descriptor, global::MovingAverageReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Algorithm), global::Algorithm.Parser, new[]{ "MovingAverage", "MacdSample" }, new[]{ "Algorithm" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Algorithm : pb::IMessage<Algorithm> {
  private static readonly pb::MessageParser<Algorithm> _parser = new pb::MessageParser<Algorithm>(() => new Algorithm());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Algorithm> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AlgorithmReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Algorithm() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Algorithm(Algorithm other) : this() {
    switch (other.AlgorithmCase) {
      case AlgorithmOneofCase.MovingAverage:
        MovingAverage = other.MovingAverage.Clone();
        break;
      case AlgorithmOneofCase.MacdSample:
        MacdSample = other.MacdSample.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Algorithm Clone() {
    return new Algorithm(this);
  }

  /// <summary>Field number for the "moving_average" field.</summary>
  public const int MovingAverageFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MovingAverage MovingAverage {
    get { return algorithmCase_ == AlgorithmOneofCase.MovingAverage ? (global::MovingAverage) algorithm_ : null; }
    set {
      algorithm_ = value;
      algorithmCase_ = value == null ? AlgorithmOneofCase.None : AlgorithmOneofCase.MovingAverage;
    }
  }

  /// <summary>Field number for the "macd_sample" field.</summary>
  public const int MacdSampleFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MACDSample MacdSample {
    get { return algorithmCase_ == AlgorithmOneofCase.MacdSample ? (global::MACDSample) algorithm_ : null; }
    set {
      algorithm_ = value;
      algorithmCase_ = value == null ? AlgorithmOneofCase.None : AlgorithmOneofCase.MacdSample;
    }
  }

  private object algorithm_;
  /// <summary>Enum of possible cases for the "algorithm" oneof.</summary>
  public enum AlgorithmOneofCase {
    None = 0,
    MovingAverage = 1,
    MacdSample = 2,
  }
  private AlgorithmOneofCase algorithmCase_ = AlgorithmOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlgorithmOneofCase AlgorithmCase {
    get { return algorithmCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAlgorithm() {
    algorithmCase_ = AlgorithmOneofCase.None;
    algorithm_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Algorithm);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Algorithm other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MovingAverage, other.MovingAverage)) return false;
    if (!object.Equals(MacdSample, other.MacdSample)) return false;
    if (AlgorithmCase != other.AlgorithmCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (algorithmCase_ == AlgorithmOneofCase.MovingAverage) hash ^= MovingAverage.GetHashCode();
    if (algorithmCase_ == AlgorithmOneofCase.MacdSample) hash ^= MacdSample.GetHashCode();
    hash ^= (int) algorithmCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (algorithmCase_ == AlgorithmOneofCase.MovingAverage) {
      output.WriteRawTag(10);
      output.WriteMessage(MovingAverage);
    }
    if (algorithmCase_ == AlgorithmOneofCase.MacdSample) {
      output.WriteRawTag(18);
      output.WriteMessage(MacdSample);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (algorithmCase_ == AlgorithmOneofCase.MovingAverage) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MovingAverage);
    }
    if (algorithmCase_ == AlgorithmOneofCase.MacdSample) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MacdSample);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Algorithm other) {
    if (other == null) {
      return;
    }
    switch (other.AlgorithmCase) {
      case AlgorithmOneofCase.MovingAverage:
        if (MovingAverage == null) {
          MovingAverage = new global::MovingAverage();
        }
        MovingAverage.MergeFrom(other.MovingAverage);
        break;
      case AlgorithmOneofCase.MacdSample:
        if (MacdSample == null) {
          MacdSample = new global::MACDSample();
        }
        MacdSample.MergeFrom(other.MacdSample);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::MovingAverage subBuilder = new global::MovingAverage();
          if (algorithmCase_ == AlgorithmOneofCase.MovingAverage) {
            subBuilder.MergeFrom(MovingAverage);
          }
          input.ReadMessage(subBuilder);
          MovingAverage = subBuilder;
          break;
        }
        case 18: {
          global::MACDSample subBuilder = new global::MACDSample();
          if (algorithmCase_ == AlgorithmOneofCase.MacdSample) {
            subBuilder.MergeFrom(MacdSample);
          }
          input.ReadMessage(subBuilder);
          MacdSample = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
